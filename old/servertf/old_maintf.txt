terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
}

# Consolidated service account for Cloud Run
resource "google_service_account" "cloud_run_server_sa" {
  account_id   = "cloud-run-server-sa"
  display_name = "Cloud Run Service Account"
  project      = var.project_id
}

# Consolidated IAM roles for Cloud Run SA
resource "google_project_iam_member" "cloud_run_server_sa_roles" {
  for_each = toset([
    "roles/run.invoker",
    "roles/cloudtasks.enqueuer",
    "roles/cloudtasks.viewer",
    "roles/iam.serviceAccountTokenCreator"  # Consolidated token creator role
  ])

  project = var.project_id
  role    = each.value
  member  = "serviceAccount:${google_service_account.cloud_run_server_sa.email}"
}

# Cloud Run Service
resource "google_cloud_run_v2_service" "server_cloud_run" {
  name     = "server-cloud-run"
  location = var.region

  template {
    service_account = google_service_account.cloud_run_server_sa.email
    containers {
      image = "${var.region}-docker.pkg.dev/${var.project_id}/${var.image_name}/${var.image_name}"
    }
  }
}

# Pub/Sub Topic
resource "google_pubsub_topic" "compute_updates" {
  name = "compute-updates"
}

# Pub/Sub Service Account
resource "google_service_account" "vertex_updates_pubsub_sa" {
  account_id   = "vertex-updates-pubsub-invoker"
  display_name = "Vertex Updates Pub/Sub Invoker"
}

# Get project data
data "google_project" "project" {
  project_id = var.project_id
}

# Consolidated Pub/Sub publisher permissions for Vertex AI
resource "google_pubsub_topic_iam_member" "vertex_publisher" {
  project = var.project_id
  topic   = google_pubsub_topic.compute_updates.name
  role    = "roles/pubsub.publisher"
  member  = "serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com"
}

# give pubsub access permissions to service account used by vertex (default compute account)
resource "google_project_iam_member" "vertex_unrestricted_access" {
    project = var.project_id
    role    = "roles/owner"
    member  = "serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com"
}

# Cloud Run invoker permissions
resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_v2_service.server_cloud_run.location
  service  = google_cloud_run_v2_service.server_cloud_run.name
  role     = "roles/run.invoker"
  members  = [
    "serviceAccount:${google_service_account.vertex_updates_pubsub_sa.email}",
    "allUsers"  # Consolidated public access
  ]
}

# Pub/Sub service identity
resource "google_project_service_identity" "pubsub_agent" {
  provider = google-beta
  project  = var.project_id
  service  = "pubsub.googleapis.com"
}

# Consolidated token creator permissions
resource "google_project_iam_member" "pubsub_token_creator" {
  project = var.project_id
  role    = "roles/iam.serviceAccountTokenCreator"
  member  = "serviceAccount:${google_project_service_identity.pubsub_agent.email}"
}

# Pub/Sub subscription
resource "google_pubsub_subscription" "subscription" {
  name  = "pubsub_subscription"
  topic = google_pubsub_topic.compute_updates.name

  push_config {
    push_endpoint = "${google_cloud_run_v2_service.server_cloud_run.uri}/updates"
    oidc_token {
      service_account_email = google_service_account.vertex_updates_pubsub_sa.email
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}

# Cloud Tasks queue
resource "google_cloud_tasks_queue" "default_queue" {
  name     = var.cloud_task_queue
  location = var.region
  project  = var.project_id

  rate_limits {
    max_concurrent_dispatches  = 10
    max_dispatches_per_second = 500
  }

  retry_config {
    max_attempts  = 5
    min_backoff   = "1s"
    max_backoff   = "10s"
    max_doublings = 4
  }
}